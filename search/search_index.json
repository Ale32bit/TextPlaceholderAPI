{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About Placeholder API","text":"<p>It's a small, JIJ-able API that allows creation and parsing placeholders within strings and Minecraft Text Components. Placeholder API uses a simple format of <code>%modid:type%</code> or <code>%modid:type data%</code> (<code>%modid:type/data%</code> prior to 1.19). It also includes simple, general usage text format indented for simplifying user input in configs/chats/etc.</p>"},{"location":"#for-users","title":"For users","text":"<p>It allows users to configure multiple mods in similar way without losing compatibility between mods. Placeholders allow changing what and where any information is present within compatible mods.</p> <p>Additionally, Simplified Text Format allows to style them in readable way without the requirement of writing JSON manually or using generators.</p> <ul> <li>Using placeholders</li> <li>Default placeholder list</li> <li>Mod placeholder list</li> <li>QuickText Format</li> <li>Simplified Text Format</li> </ul>"},{"location":"#for-developers","title":"For developers","text":"<p>Usage of Placeholder API is a simple way to achieve good mod compatibility without having to implement multiple mod specific apis. Additionally, the placeholder parsing system can be used for replacing own static (or dynamic placeholders) in Text created by player or read from config. This with combination of Simplified Text Format allows creating great user/admin experience.</p> <ul> <li>Getting Started</li> <li>Adding placeholders</li> <li>Parsing placeholders</li> <li>TextNodes and NodeParsers</li> <li>Using Simplified Text Format (TextParserV1)</li> </ul>"},{"location":"dev/adding-placeholders/","title":"Adding placeholders","text":"<p>Creation of new placeholders is simple. You just need to import <code>eu.pb4.placeholders.api.Placeholders</code> and call static <code>register</code> method. You only need to provide 2 arguments:</p> <ul> <li>Identifier with your mod id as namespace and path as argument name (with one additional limitation being not allowed to use <code>/</code> in it).</li> <li>A function (in form of lambda for example) that takes PlaceholderContext and nullable string argument, returns PlaceholderResult,</li> </ul> <p>Example</p> JavaKotlin <pre><code>Placeholders.register(\n         new Identifier(\"example\", \"placeholder\"),\n         (ctx, arg) -&gt; PlaceholderResult.value(Text.literal(\"Hello World!\"))\n);\n</code></pre> <pre><code>Placeholders.register(Identifier(\"example\", \"placeholder\")) { ctx, arg -&gt;\n    PlaceholderResult.value(Text.literal(\"Hello World!\"))\n}\n</code></pre>"},{"location":"dev/adding-placeholders/#using-the-context","title":"Using the context","text":"<p><code>PlaceholderContext</code> object passed to placeholder contains allows retrieving the server, the <code>ServerCommandSource</code>, the source world (if exist), the source <code>ServerPlayerEntity</code> (if exist), the source <code>Entity</code> (if exists), and the source's <code>GameProfile</code> (if exists).</p> <p>It also includes few methods for checking if they are present, such as <code>hasWorld()</code>, <code>hasPlayer()</code>, <code>hasGameProfile()</code>, and <code>hasEntity()</code>.</p> <p>Here is example for a placeholder, which requires a player:</p> JavaKotlin <pre><code>Placeholders.register(new Identifier(\"player\", \"displayname\"), (ctx, arg) -&gt; {\n    if (!ctx.hasPlayer())\n        return PlaceholderResult.invalid(\"No player!\");\n\n    return PlaceholderResult.value(ctx.getPlayer().getDisplayName());\n});\n</code></pre> <pre><code>Placeholders.register(Identifier(\"player\", \"displayname\")) { ctx, args -&gt;\n    if (!ctx.hasPlayer())\n        return PlaceholderResult.invalid(\"No player!\")\n\n    PlaceholderResult.value(ctx.player!!.displayName)\n}\n</code></pre>"},{"location":"dev/adding-placeholders/#arguments","title":"Arguments","text":"<p>You can also add an argument to your placeholder, which removes requirement of mostly repeated placeholders and allows degree of customisation. Argument itself is a string, so you can parse it in any way.</p> JavaKotlin <pre><code>PlaceholderAPI.register(new Identifier(\"server\", \"name_from_uuid\"), (ctx, arg) -&gt; {\n    if (arg == null)\n        return PlaceholderResult.invalid(\"No argument!\");\n\n    UUID uuid = UUID.fromString(arg);\n    GameProfile player = ctx.server().getUserCache().getByUuid(UUID.fromString(arg)).get()\n\n    return PlaceholderResult.value(player.getName()));\n});\n</code></pre> <pre><code>PlaceholderAPI.register(Identifier(\"server\", \"name_from_uuid\")) { ctx, arg -&gt;\n    if (arg == null)\n        return PlaceholderResult.invalid(\"No argument!\")\n\n    val uuid = UUID.fromString(arg)\n    val player = ctx.server().userCache.getByUuid(uuid).get()\n\n    return PlaceholderResult.value(player.name)\n}\n</code></pre>"},{"location":"dev/adding-placeholders/#returning-correct-value","title":"Returning correct value","text":"<p>Placeholders need to return instance of PlaceholderResult. It can be created by usage of provided static methods on this class.</p> <p>If it was successful:</p> <ul> <li><code>PlaceholderResult.value(Text text)</code> - Creates a value with text</li> <li><code>PlaceholderResult.value(String text)</code> - Creates a value from string, by parsing it with TextParser</li> </ul> <p>If it was invalid (for example, no player or argument):</p> <ul> <li><code>PlaceholderResult.invalid()</code> - Creates simple invalid result</li> <li><code>PlaceholderResult.invalid(String reason)</code> -- Creates invalid result with a reason.   The reason is returned as a response, but may be used further by other parsers.</li> </ul>"},{"location":"dev/getting-started/","title":"Getting Started","text":"<p>To begin, you need to add Nucleoid's maven to your build file.</p> GroovyKotlin build.gradle<pre><code>repositories {\n    // There might be other repos there too, just add it at the end\n    maven { \n        url \"https://maven.nucleoid.xyz/\"\n        name \"Nucleoid\"\n    }\n}\n</code></pre> build.gradle.kts<pre><code>repositories {\n    // There might be other repos there too, just add it at the end\n    maven(\"https://maven.nucleoid.xyz/\") { name = \"Nucleoid\" }\n}\n</code></pre> <p>Then you just declare it as dependency!</p> <p>Info</p> <p></p> <p>You just need to replace <code>[VERSION]</code> with version you want to use (which should be usually the latest available). For list of version names, you can check maven</p> GroovyKotlin build.gradle<pre><code>dependencies {\n    // You will have other dependencies here too\n\n    modImplementation include(\"eu.pb4:placeholder-api:[VERSION]\")\n}\n</code></pre> build.gradle.kts<pre><code>dependencies {\n    // You will have other dependencies here too\n\n    modImplementation(include(\"eu.pb4:placeholder-api:[VERSION]\"))\n}\n</code></pre> <p>This will also include it in yours mods, so users won't need to download it separately.</p> <p>You just need to replace <code>[VERSION]</code> with the version you want to use (which should be usually the latest available). For list of version names, you can check Maven Repository</p>"},{"location":"dev/parsing-placeholders/","title":"Parsing placeholders","text":"<p>There are few ways (and types) of placeholders you can parse with PlaceholderAPI. So depending on your use case some of these will be more useful than others.</p>"},{"location":"dev/parsing-placeholders/#placeholder-context","title":"Placeholder Context","text":"<p>Placeholders should be provided with a context at all times. The context allows the placeholder parser to inject placeholders that require an optional context, such as a player.</p> <p>A <code>PlaceholderContext</code> is created using one of the <code>PlaceholderContext.of(...)</code> variants. Depending on the objects passed, different placeholders may be available.</p> <code>PlaceholderContext.of(...)</code> Variants <ul> <li><code>MinecraftServer</code><ul> <li>May use placeholders that depend on the server</li> <li>May use placeholders that depend on <code>ServerCommandSource</code> (Note: uses the command source   from <code>MinecraftServer.getCommandSource()</code>)</li> </ul> </li> <li><code>GameProfile</code><ul> <li>May use placeholders that depend on the server</li> <li>May use placeholders that depend on <code>ServerCommandSource</code> (Note: creates a new dummy command source at <code>(0,0,0)</code>)</li> <li>May use placeholders that depend on <code>GameProfile</code></li> </ul> </li> <li><code>ServerPlayerEntity</code><ul> <li>May use placeholders that depend on the server</li> <li>May use placeholders that depend on <code>ServerCommandSource</code></li> <li>May use placeholders that depend on <code>ServerWorld</code></li> <li>May use placeholders that depend on <code>ServerPlayerEntity</code></li> <li>May use placeholders that depend on <code>Entity</code></li> <li>May use placeholders that depend on <code>GameProfile</code></li> </ul> </li> <li><code>ServerCommandSource</code><ul> <li>May use placeholders that depend on the server</li> <li>May use placeholders that depend on <code>ServerCommandSource</code></li> <li>May use placeholders that depend on <code>ServerWorld</code></li> <li>May use placeholders that depend on <code>ServerPlayerEntity</code> only if the source has a player</li> <li>May use placeholders that depend on <code>Entity</code> only if the source has an entity</li> <li>May use placeholders that depend on <code>GameProfile</code> only if the source has a player</li> </ul> </li> <li><code>Entity</code><ul> <li>May use placeholders that depend on the server</li> <li>May use placeholders that depend on <code>ServerCommandSource</code></li> <li>May use placeholders that depend on <code>ServerWorld</code></li> <li>May use placeholders that depend on <code>ServerPlayerEntity</code> only if the source has a player</li> <li>May use placeholders that depend on <code>Entity</code></li> <li>May use placeholders that depend on <code>GameProfile</code> only if the source has a player</li> </ul> </li> </ul>"},{"location":"dev/parsing-placeholders/#parsing-global-placeholders","title":"Parsing global placeholders","text":"<p>Parsing global placeholders is really simple, as long as you have access to ServerPlayerEntity or MinecraftServer object. You just need to simply import <code>eu.pb4.placeholders.api.Placeholders</code> and call <code>parseText</code>. This method will return fully parsed Text, which can be displayed to the user.</p> <p>Example</p> JavaKotlin <pre><code>Text message = Placeholders.parseText(textInput, PlaceholderContext.of(...));\n</code></pre> <pre><code>val message = Placeholders.parseText(textInput, PlaceholderContext.of(...))\n</code></pre> <p>Placeholders itself will use default formatting of <code>%category:placeholder%</code>. If you want to use other formatting for them (which is recommended), you can use <code>parseText(Text, PlaceholderContext, Pattern)</code>. Prefer those listed in Preferred Patterns for static.</p>"},{"location":"dev/parsing-placeholders/#parsing-owncustompredefined-placeholders","title":"Parsing own/custom/predefined placeholders","text":"<p>If you want to parse your own placeholders, you can do this in 2 ways.</p>"},{"location":"dev/parsing-placeholders/#static-placeholders","title":"Static placeholders","text":"<p>To parse static placeholders you need to create a Map with <code>String</code> as a key and <code>Text</code> as a value. You also need a Pattern object (which can be taken from predefined ones). Then it's as simple as calling a <code>parseText</code> static method on <code>PlaceholderAPI</code> class.</p> <p>Example</p> JavaKotlin StaticPlaceholders.java<pre><code>public class StaticPlaceholders {\n    /**\n     * Formats a player message according to &lt;code&gt;inputText&lt;/code&gt;\n     *\n     * Example input:\n     * &lt;code&gt;\n     * ${playerName} says \"${message}\"\n     * &lt;/code&gt;\n     *\n     * @param inputText   The text that is parsed for placeholders.\n     *                    Example input:\n     *                    &lt;code&gt;${playerName} says \"${message}\"&lt;/code&gt;\n     * @param player      The player name used to replace the ${playerName}\n     *                    variable in the input. Example input:\n     *                    the player who's name is 'ThePlayerUsername'\n     * @param messageText The message text used to replace the ${message}\n     *                    variable in the input. Example input:\n     *                    &lt;code&gt;this is the message&lt;/code&gt;\n     *\n     * @return The formatted message. Example return:\n     *         &lt;code&gt;ThePlayerUsername says \"this is the message\"&lt;/code&gt;\n     */\n    public static Text formatPlayerMessage(Text inputText, ServerPlayerEntity player,\n                                           Text messageText) {\n        Map&lt;String, Text&gt; placeholders = Map.of(\n                \"message\", messageText,        // replace ${message} with the messageText\n                \"playerName\", player.getName() // replace ${playerName} with the player's name\n                                               );\n\n        return Placeholders.parseText(inputText,\n                                      Placeholders.PREDEFINED_PLACEHOLDER_PATTERN,\n                                      placeholders); // parse the inputText\n    }\n}\n</code></pre> StaticPlaceholders.kt<pre><code>object StaticPlaceholders {\n    /**\n     * Formats a player message according to [inputText]\n     *\n     * Example input:\n     * ```\n     * ${playerName} says \"${message}\"!\n     * ```\n     *\n     * @param inputText The text that is parsed for placeholders.\n     *                  Example input:\n     *                  `${playerName} says \"${message}\"`\n     *\n     * @param player The player name used to replace the `${playerName}` variable in the input.\n     *               Example input:\n     *               the player who's name is `ThePlayerUsername`\n     *\n     * @param messageText The text used to replace the `${message}` variable in the input.\n     *                    Example input:\n     *                    `this is the message`\n     *\n     * @return The formatted message.\n     *         Example return:\n     *         ```\n     *         ThePlayerUsername says \"this is the message\"!\n     *         ```\n     */\n    fun formatPlayerMessage(inputText: Text?, player: ServerPlayerEntity, messageText: Text): Text {\n        val placeholders = mapOf(\n                \"message\" to messageText,    // replace ${message} with the messageText\n                \"playerName\" to player.name, // replace ${playerName} with the player's name\n                                )\n        return Placeholders.parseText(inputText, Placeholders.PREDEFINED_PLACEHOLDER_PATTERN,\n                                      placeholders) // parse the inputText\n    }\n}\n</code></pre>"},{"location":"dev/parsing-placeholders/#dynamic-placeholders","title":"Dynamic placeholders","text":"<p>In case where you want to parse placeholder with a context similar to global one, you need to create a Map with <code>Identifier</code> as a key and <code>PlaceholderHandler</code> as a value (same as adding global ones). You also will need a pattern object, which is the same as with static ones.</p> <p>As opposite to global ones, you don't need to define namespace/category as it can default to minecraft one (for simpler user input). Then you just parse it with <code>parseText(Text, PlaceholderContext, Pattern, PlaceholderGetter)</code>.</p> <p>Example</p> JavaKotlin DynamicPlaceholders.java<pre><code>public class DynamicPlaceholders {\n    private static final Random random = new Random();\n\n    /**\n     * Example input:\n     * &lt;code&gt;\n     * Hello! ${player blue}. Random number between 0 and 20: ${random 20}\n     * &lt;/code&gt;\n     *\n     * Example output:\n     * &lt;code&gt;\n     * Hello! &lt;blue&gt;ThePlayerName&lt;/blue&gt;. Random number: 13\n     * &lt;/code&gt;\n     */\n    public static Text parseInputText(ServerPlayerEntity player, Text inputText) {\n        // parse the inputText message\n        return Placeholders.parseText(inputText, PlaceholderContext.of(player),\n                                      Placeholders.PREDEFINED_PLACEHOLDER_PATTERN,\n                                      DynamicPlaceholders::getPlaceholder);\n    }\n\n    private static PlaceholderHandler getPlaceholder(String id) {\n        return switch (id) {\n            case \"player\" -&gt; DynamicPlaceholders::playerPlaceholder;\n            case \"random\" -&gt; DynamicPlaceholders::randomPlaceholder;\n            default -&gt; null;\n        };\n    }\n\n    private static PlaceholderResult playerPlaceholder(PlaceholderContext ctx, String arg) {\n        if (arg == null)\n            return PlaceholderResult.invalid(\"No argument!\");\n\n        if (!ctx.hasPlayer())\n            return PlaceholderResult.value(\n                    Text.literal(\"You are not a player!\")\n                        .setStyle(Style.EMPTY.withColor(TextColor.parse(arg)))\n                                          );\n\n        return PlaceholderResult.value(\n                ctx.player().getName().copy()\n                   .setStyle(Style.EMPTY.withColor(TextColor.parse(arg)))\n                                      );\n    }\n\n    private static PlaceholderResult randomPlaceholder(PlaceholderContext ctx, String arg) {\n        if (arg == null) {\n            int randomNumber = random.nextInt(10);\n            return PlaceholderResult.value(String.valueOf(randomNumber));\n        }\n\n        try {\n            int randomNumber = random.nextInt(Integer.parseInt(arg));\n            return PlaceholderResult.value(String.valueOf(randomNumber));\n        } catch (NumberFormatException e) {\n            return PlaceholderResult.invalid(\"Invalid number!\");\n        }\n    }\n}\n</code></pre> DynamicPlaceholders.kt<pre><code>object DynamicPlaceholders {\n    private val random = Random()\n\n    /**\n     * Example input:\n     * ```\n     * Hello! ${player blue}. Random number between 0 and 20: ${random 20}\n     * ```\n     *\n     * Example output:\n     * ```\n     * Hello! &lt;blue&gt;ThePlayerName&lt;/blue&gt;. Random number: 13\n     * ```\n     */\n    fun parseInputText(player: ServerPlayerEntity, inputText: Text): Text {\n        // parse the inputText message\n        return Placeholders.parseText(inputText, PlaceholderContext.of(player),\n                                      Placeholders.PREDEFINED_PLACEHOLDER_PATTERN,\n                                      DynamicPlaceholders::getPlaceholder)\n    }\n\n    private fun getPlaceholder(id: String): PlaceholderHandler? {\n        return when (id) {\n            \"player\" -&gt; PlaceholderHandler(DynamicPlaceholders::playerPlaceholder)\n            \"random\" -&gt; PlaceholderHandler(DynamicPlaceholders::randomPlaceholder)\n            else     -&gt; null\n        }\n    }\n\n    private fun playerPlaceholder(ctx: PlaceholderContext, arg: String?): PlaceholderResult {\n        if (arg == null)\n            return PlaceholderResult.invalid(\"No argument!\")\n\n        if (ctx.player == null)\n            return PlaceholderResult.value(\n                    Text.literal(\"You are not a player!\")\n                            .setStyle(Style.EMPTY.withColor(TextColor.parse(arg)))\n                                          )\n\n        return PlaceholderResult.value(\n                ctx.player!!.name.copy()\n                        .setStyle(Style.EMPTY.withColor(TextColor.parse(arg)))\n                                      )\n    }\n\n    private fun randomPlaceholder(ctx: PlaceholderContext, arg: String?): PlaceholderResult {\n        return try {\n            val randomNumber = random.nextInt(arg?.toInt() ?: 10)\n            PlaceholderResult.value(randomNumber.toString())\n        } catch (e: NumberFormatException) {\n            PlaceholderResult.invalid(\"Invalid number!\")\n        }\n    }\n}\n</code></pre>"},{"location":"dev/parsing-placeholders/#preferred-patterns-for-static","title":"Preferred Patterns for static","text":"<p>PlaceholderAPI has few Patterns you can use, which are accessible as static objects on <code>Placeholders</code> class.</p> <ul> <li><code>Placeholders.PREDEFINED_PLACEHOLDER_PATTERN</code> (<code>${placeholder}</code>) - works the best in most cases, doesn't collide with other ones.</li> <li><code>Placeholders.ALT_PLACEHOLDER_PATTERN_CUSTOM</code> (<code>{placeholder}</code>) - second best, but have more chance of colliding with user   formatting.</li> </ul> <p>There are other ones, which usage is allowed, but they might work worse.</p> <ul> <li><code>Placeholders.PLACEHOLDER_PATTERN_CUSTOM</code> (<code>%placeholder%</code>) - is the same as default one, but doesn't require <code>:</code>.</li> <li><code>Placeholders.PLACEHOLDER_PATTERN</code> (<code>%category:placeholder%</code>) - used by default global placeholders (requires category).</li> <li><code>Placeholders.PLACEHOLDER_PATTERN_ALT</code> (<code>{category:placeholder}</code>) - used as alternative formatting for global ones (requires   category).</li> </ul>"},{"location":"dev/text-format/","title":"Using Simplified Text Format/TextParser","text":"<p>You can read about the format here!</p> <p>Usage of TextParser is simple and really customisable. You just need to import <code>eu.pb4.placeholders.api.TextParserUtils</code> and call static <code>formatText</code> method for admin provided configs or <code>formatTextSafe</code> for player provided ones. They both take only one String argument and output a Text object.</p> <p>Example</p> JavaKotlin <pre><code>String inputString = \"&lt;red&gt;Hello &lt;rb&gt;World&lt;/rb&gt;!\"\n\nText output = TextParserUtils.parseText(inputString);\n</code></pre> <pre><code>val inputString = \"&lt;red&gt;Hello &lt;rb&gt;World&lt;/rb&gt;!\"\n\nval output = TextParserUtils.parseText(inputString);\n</code></pre>"},{"location":"dev/text-format/#parsing-with-only-selected-ones","title":"Parsing with only selected ones","text":"<p>If you want to only use selected tags, you can simply get map of all with <code>TextParserV1.DEFAULT.getTags()</code>. Then you just use them with <code>TextParserUtils.parseText(String, TextParserV1.TagParserGetter)</code>.</p>"},{"location":"dev/text-nodes/","title":"Text Nodes and Node Parsers","text":""},{"location":"dev/text-nodes/#what-are-textnodes","title":"What are TextNodes?","text":"<p>It is extensible representation of parsed text, allowing for simpler and more compatible parsing without losing vanilla compatibility. It can be used for templating, which can minimize time  required for parsing static text multiple times for placeholder insertion. There are 2 main types of TextNodes.</p>"},{"location":"dev/text-nodes/#value-text-nodes","title":"Value Text Nodes","text":"<p>This type of TextNode contains any text or defining information that isn't dependent on formatting. It is the lowest level on which parsers generally operate.</p> <p>You can create your own custom one by implementing <code>TextNode</code> interface.</p> Java <pre><code>public record DirectTextNode(Text text) implements TextNode {\n    @Override\n    public Text toText(ParserContext context, boolean removeBackslash) {\n        return this.text;\n    }\n}\n</code></pre> <p>The context is used mostly to allow for dynamic templating/values (for example placeholder context). The <code>removeBackslash</code> option defines whatever LiteralNode should remove <code>\\</code> symbol while  it's used for escaping formatting.</p> <p>Examples:</p> <ul> <li>LiteralNode - Used for direct text, requires special parsing by parsers,</li> <li>TranslationNode - Used for translated text, also requires special parsing,</li> <li>DirectTextNode - Allows you to insert non-transformable text, can be used for static placeholders, </li> <li>PlaceholderNode (Internal) - Used for representing parsed placeholder without fetching it's final value.</li> </ul>"},{"location":"dev/text-nodes/#parent-text-nodes","title":"Parent Text Nodes","text":"<p>This type is used for joining multiple Value/Parent Text Nodes into single object. Additionally,  they are used to add any type of formatting like colors, hovers or fonts. Most of builtin  ParentNodes do single type of formatting.</p> <p>You can create your own by extending <code>ParentNode</code> class or implementing <code>ParentTextNode</code> interface.</p> Java <pre><code>public final class ColorNode extends ParentNode {\n    private final TextColor color;\n\n    public ColorNode(TextNode[] children, TextColor color) {\n        super(children);\n        this.color = color;\n    }\n\n    @Override\n    protected Text applyFormatting(MutableText out, ParserContext context) {\n        return out.setStyle(out.getStyle().withColor(this.color));\n    }\n\n    @Override\n    public ParentTextNode copyWith(TextNode[] children) {\n        return new ColorNode(children, this.color);\n    }\n\n    // This one should be only override if you have dynamic sub-values, like HoverNode\n    @Override\n    public ParentTextNode copyWith(TextNode[] children, NodeParser parser) {\n        return new ColorNode(children, this.color);\n    }\n}\n</code></pre> <p>Examples:</p> <ul> <li>ParentNode - Most basic parent node, used purely for grouping elements,</li> <li>HoverNode - Adds HoverEvent to text,</li> <li>GradientNode - Allows inputting gradients for final text, without breaking parsing before.</li> </ul>"},{"location":"dev/text-nodes/#node-parsers","title":"Node Parsers","text":"<p>Simply put, Node Parsers are parsers operating on Text Nodes. They use them both as input and output,  allowing them to easily stack with other Node Parsers. They need to implement a <code>NodeParser</code> interface.</p> <p>To use Node Parsers, you first need to get instance of it and then invoke one of provided method.</p> <p>For example:</p> Java <pre><code>public class Example {\n\n    // With player context\n    public static void exampleContext(ServerPlayerEntity player) {\n        NodeParser parser = NodeParser.merge(TextParserV1.DEFAULT, Placeholders.DEFAULT_PLACEHOLDER_GETTER);\n\n        TextNode output = parser.parseNode(\"&lt;rb&gt;Hello %player:name%\");\n        // or\n        TextNode output = parser.parseNode(TextNode.of(\"&lt;rb&gt;Hello %player:name%\"));\n        // or (only way before 2.0.0-beta.4)\n        TextNode output = TextNode.asSingle(parser.parseNodes(TextNode.of(\"&lt;rb&gt;Hello %player:name%\")));\n\n        Text text = output.toText(PlaceholderContext.of(player));\n        // or\n        Text text = output.toText(PlaceholderContext.of(player).asParserContext());\n        // or\n        Text text = output.toText(ParserContext.of().with(PlaceholderContext.KEY, PlaceholderContext.of(player)));\n        // or (only way before 2.0.0-beta.4)\n        Text text = output.toText(PlaceholderContext.of(player).asParserContext(), true);\n    }\n\n    // Without context\n    public static void example() {\n        NodeParser parser = NodeParser.merge(TextParserV1.DEFAULT, Placeholders.DEFAULT_PLACEHOLDER_GETTER);\n\n        TextNode output = parser.parseNode(\"&lt;rb&gt;Hello user!\");\n\n        Text text = output.toText();\n        // or\n        Text text = output.toText(ParserContext.of());\n        // or (only way before 2.0.0-beta.4)\n        Text text = output.toText(ParserContext.of(), true);\n    }\n}\n</code></pre> <p>Text Placeholder API comes with multiple builtin parsers:</p> <ul> <li>TextParserV1 (See more here!) - Tag based parser for user input,</li> <li>MarkdownLiteParserV1 - Minimalistic Markdown parser with only vanilla compatible formatting,</li> <li>LegacyFormattingParser - Simple parser adding support for legacy (&amp;) formatting,</li> <li>PatternPlaceholderParser - Backend parser used by placeholder implementation. Added as NodeParser with 2.0.0-pre.4.</li> </ul>"},{"location":"dev/text-nodes/#custom-node-parsers","title":"Custom Node Parsers","text":"<p>Implementing custom Node Parsers might be tricky. But the simplest one boils down to implementing NodeParser.</p> <p>Default implementation should support parsing <code>LiteralNode</code>, <code>TranslatedNode</code> and <code>ParentNode</code>  to be considered functional.</p> Java <pre><code>public record ExampleParser() implements NodeParser {\n    public TextNode[] parseNodes(TextNode input) {\n        if (input instanceof LiteralNode node) {\n            return TextNode.array(new LiteralNode(node.value().replace(\"&lt;3\", \"\u2764\ufe0f\")));\n        } else if (input instanceof TranslatedNode node) {\n            var args = new ArrayList&lt;&gt;();\n            for (var arg : node.args()) {\n                args.add(arg instanceof TextNode argNode ? this.parseNode(argNode) : arg);\n            }\n\n            return TextNode.array(new TranslatedNode(node.key(), args.toArray()));\n        } else if (input instanceof ParentTextNode node) {\n            var children = new ArrayList&lt;TextNode&gt;();\n\n            for (var child : parentNode.getChildren()) {\n                children.add(this.parseNode(child));\n            }\n\n            return TextNode.array(parentNode.copyWith(out.toArray(new TextNode[0]), this));\n        }\n\n        return TextNode.array(input);\n    }\n}\n</code></pre> <p>Then it can be used directly just like any other builtin NodeParser.</p>"},{"location":"user/default-placeholders/","title":"Default placeholder list","text":"<p>These placeholders are provided by default and are available for every mod using Placeholder API. If placeholder isn't parsed, make sure it is used in correct context, with valid arguments and that you are using the latest version.</p> <p>Prior to 1.19, arguments were separated with a slash (<code>/</code>) instead of space.</p>"},{"location":"user/default-placeholders/#list-of-placeholders","title":"List of placeholders","text":""},{"location":"user/default-placeholders/#player","title":"Player","text":"<p>Vanilla Statistics</p> <p>A list of <code>[statistic]</code>s can be found on the Minecraft Wiki</p> <p>A list of <code>[type]</code>s can be found on the Minecraft Wiki</p> <p>Examples: <code>%player:statistic play_time%</code>, <code>%player:statistic mined diamond_ore%</code></p> <ul> <li><code>%player:name%</code> - The player's name.</li> <li><code>%player:name_visual%</code> - The player's name (without hover and click action).</li> <li><code>%player:name_unformatted%</code> - The player's name (without formatting).</li> <li><code>%player:displayname%</code> - The player's display name (used on chat).</li> <li><code>%player:displayname_visual%</code> - The player's display name (without hover and click action).</li> <li><code>%player:displayname_unformatted%</code> - The player's display name (without formatting).</li> <li><code>%player:ping%</code> - The player's ping.</li> <li><code>%player:ping_colored%</code> - The player's ping (colored).</li> <li><code>%player:pos_x%</code> - The player's <code>x</code> coordinate.</li> <li><code>%player:pos_y%</code> - The player's <code>y</code> coordinate.</li> <li><code>%player:pos_z%</code> - The player's <code>z</code> coordinate.</li> <li><code>%player:health%</code> - The player's health.</li> <li><code>%player:max_health%</code> - The player's max health.</li> <li><code>%player:hunger%</code> - The player's hunger.</li> <li><code>%player:saturation%</code> - The player's saturation.</li> <li><code>%player:inventory_slot [slot number]%</code> - The item in player's inventory at slot <code>number</code>.</li> <li><code>%player:equipment_slot [name]%</code> - The player's equipment at selected slot. Valid values for <code>[name]</code>   are <code>mainhand</code>, <code>offhand</code>, <code>head</code>, <code>chest</code>, <code>legs</code> and <code>feet</code>.</li> <li><code>%player:playtime%</code>/<code>%player:playtime [formatting]%</code> - The player's playtime.</li> <li><code>%player:statistic [statistic]%</code>/<code>%player:statistic [type] [statistic]%</code> - The formatted value of player's statistic.</li> <li><code>%player:statistic_raw [statistic]%</code>/<code>%player:statistic_raw [type] [statistic]%</code> - The value of player's statistic.</li> <li><code>%player:objective [objective]%</code> - The value of player's scoreboard objective.</li> </ul>"},{"location":"user/default-placeholders/#world","title":"World","text":"<p>Valid Groups</p> <p>Valid values for <code>[group]</code> are <code>monster</code>, <code>creature</code>, <code>ambient</code>, <code>axolotls</code>, <code>underground_water_creature</code>, <code>water_creature</code>, <code>water_ambient</code>, and <code>misc</code>.</p> <ul> <li><code>%world:time%</code> - The world's time (Format: <code>HH:MM</code>).</li> <li><code>%world:time_alt%</code> - The world's time (alternative formatting) (Format: <code>HH:MM AM/PM</code>).</li> <li><code>%world:day%</code> - The world's day.</li> <li><code>%world:player_count%</code> - The world's player count.</li> <li><code>%world:mob_count%</code>/<code>%world:mob_count [group]%</code> - Shows amount of spawned mobs.</li> <li><code>%world:mob_cap%</code>/<code>%world:mob_cap [group]%</code> - Shows maximum amount of mobs that can spawn is player's world.</li> <li><code>%world:id%</code> - The world's ID.</li> <li><code>%world:name%</code> - The world's name.</li> </ul>"},{"location":"user/default-placeholders/#server","title":"Server","text":"<ul> <li><code>%server:tps%</code> - The server's TPS.</li> <li><code>%server:tps_colored%</code> - The server's TPS (colored).</li> <li><code>%server:mspt%</code> - The server's MSPT.</li> <li><code>%server:mspt_colored%</code> - The server's MSPT (colored).</li> <li><code>%server:time%</code>/<code>%server:time [formatting]%</code> - The server's time.</li> <li><code>%server:uptime%</code>/<code>%server:uptime [formatting]%</code> (2.1.2+)- The server's uptime.</li> <li><code>%server:version%</code> - The server's version.</li> <li><code>%server:name%</code> - The server's name.</li> <li><code>%server:motd%</code> - The server's motd.</li> <li><code>%server:used_ram%</code>/<code>%server:used_ram [gb]%</code> - The amount of ram used by server. (If the argument <code>gb</code> is added, it is displayed in   gigabytes)</li> <li><code>%server:max_ram%</code>/<code>%server:max_ram [gb]%</code> - The maximum amount of ram that can be used by server. (If the argument <code>gb</code> is added, it is   displayed in gigabytes)</li> <li><code>%server:online%</code> - The number of online players.</li> <li><code>%server:max_players%</code> - The maximum player count.</li> <li><code>%server:brand%</code> (2.1.3+) - Returns server's brand (\"fabric\"/\"quilt\"/etc).</li> <li><code>%server:mod_count%</code> (2.1.3+) - Returns amount of installed mods.</li> <li><code>%server:mod_version [modid]%</code> - Returns version of the specified mod.</li> <li><code>%server:mod_name [modid]%</code> - Returns name of the specified mod.</li> <li><code>%server:mod_description [modid]%</code> - Returns description of the specified mod.</li> <li><code>%server:objective_name_top [objective] [position]%</code> - Shows name of the player at the <code>position</code>th place in the scoreboard <code>objective</code>.</li> <li><code>%server:objective_score_top [objective] [position]%</code> - Shows score of the player at the <code>position</code>th place in the scoreboard <code>objective</code>.</li> </ul>"},{"location":"user/general/","title":"Using placeholders","text":"<p>Usage of placeholder mostly depends on implementation of mod itself. If mod uses simple, one/multiline text (for example with Simple Text Format) you just need to add it by just writing <code>%placeholder%</code> (or in some cases<code>{placeholder}</code>, <code>${placeholder}</code> or other format which should be provided on mods page).</p> <p>Inner part of placeholder can take shape of either <code>category:placeholder</code> or <code>category:placeholder argument</code> (previously <code>category:placeholder/argument</code> prior to 1.19), where <code>category</code> is replaced by type (<code>player</code>, <code>world</code>, etc) or ID of the mod and <code>placeholder</code> is the placeholder itself. Additionally, some placeholders might have additional or required argument provided after first space. It's format fully depend on mod providing it.</p> <p>You can check list of build in placeholders here and placeholders from mods here.</p>"},{"location":"user/general/#list-of-mods-supporting-displaying-placeholder-apis-placeholders","title":"List of mods supporting displaying Placeholder API's placeholders:","text":"<p>Missing Your Mod?</p> <p>Are you a mod dev, and your mod is missing? Feel free to open an issue!</p> <ul> <li> <p>Styled Player List -   CurseForge,   Modrinth,   Github</p> </li> <li> <p>Styled Chat -   CurseForge,   Modrinth,   Github</p> </li> <li> <p>Holograms -   CurseForge,   Modrinth,   Github</p> </li> <li> <p>Player Events -   CurseForge,   Github</p> </li> <li> <p>Discord4Fabric -   CurseForge,   Modrinth,   Github</p> </li> <li> <p>Fuji -   Modrinth,   Github</p> </li> </ul>"},{"location":"user/mod-placeholders/","title":"Mod placeholders list","text":"<p>These placeholders are provided by other mods. Some are build in directly, while others require an addon.</p>"},{"location":"user/mod-placeholders/#list-of-placeholders","title":"List of placeholders","text":""},{"location":"user/mod-placeholders/#afkplus","title":"AfkPlus","text":"<ul> <li><code>%afkplus:afk%</code> - Returns a configurable \"[AFK]\" tag if the player is marked as AFK.</li> <li><code>%afkplus:name%</code>/<code>%afkplus:display_name%</code> - Returns a configurable replacement for <code>%player:displayname%</code> if the player is marked as AFK.   This allows for backport formatting, and it can fully support LuckPerms Prefixes, and other mods.  By default, it returns the standard   <code>%player:displayname%</code> when not AFK, which is also configurable.</li> <li><code>%afkplus:duration%</code> - Returns the (HH-mm-SS.ss) duration since a player went AFK, or nothing.   Configurable in a more human-readable format, i.e., 5 minutes, 3 seconds.</li> <li><code>%afkplus:time%</code> - Returns the time (yyyy-MM-dd_HH.mm.ss) since a player went AFK, or nothing.</li> <li><code>%afkplus:reason%</code> - Returns the reason why a player went AFK, or nothing.</li> <li><code>%afkplus:invulnerable%</code> - Returns a basic tag to display the status if a player is marked as \"invulnerable\" using the \"disableDamage\"   features.  It is also used internally under the default \"[AFK]\" tag method, with \"[AFK:I]\", for example.</li> </ul>"},{"location":"user/mod-placeholders/#fuji","title":"Fuji","text":"<ul> <li><code>%fuji:player_mined%</code> - Sum of mining blocks of a player.</li> <li><code>%fuji:server_mined%</code> - Sum of mining blocks of a server.</li> <li><code>%fuji:player_placed%</code> - Sum of placed blocks of a player.</li> <li><code>%fuji:server_placed%</code> - Sum of placed blocks of a server.</li> <li><code>%fuji:player_killed%</code> - Sum of killed entities of a player.</li> <li><code>%fuji:server_killed%</code> - Sum of killed entities of a server.</li> <li><code>%fuji:player_moved%</code> - Sum of moved distance of a player.</li> <li><code>%fuji:server_moved%</code> - Sum of moved distance of a server.</li> <li><code>%fuji:player_playtime%</code> - Sum of playtime of a player.</li> <li><code>%fuji:server_playtime%</code> - Sum of playtime of a server.</li> <li><code>%fuji:item%</code> - Create the display of main-hand item.</li> <li><code>%fuji:inv%</code> - Create the display of inventory.</li> <li><code>%fuji:ender%</code> - Create the display of ender-chest.</li> </ul>"},{"location":"user/mod-placeholders/#get-off-my-lawn-reserved","title":"Get Off My Lawn ReServed","text":"<ul> <li><code>%goml:claim_owners%</code>/<code>%goml:claim_owners [no owners text]%</code> - Returns a list of claim owners.</li> <li><code>%goml:claim_owners_uuid%</code>/<code>%goml:claim_owners_uuid [no owners text]%</code> - Returns a list of claim owners (as UUIDs).</li> <li><code>%goml:claim_trusted%</code>/<code>%goml:claim_trusted [no trusted text]%</code> - Returns a list of trusted players.</li> <li><code>%goml:claim_trusted_uuid%</code>/<code>%goml:claim_trusted_uuid [no trusted text]%</code> - Returns a list of trusted players (as UUIDs).</li> <li><code>%goml:claim_info%</code>/<code>%goml:claim_info [no claim text]:[can build text]:[can't build text]%</code> - Returns the info for a claim.   (variables: <code>${owners}</code>, <code>${owners_uuid}</code>, <code>${trusted}</code>, <code>${trusted_uuid}</code>, <code>${anchor}</code>)</li> </ul>"},{"location":"user/mod-placeholders/#luckperms","title":"Luckperms","text":"<p>Dependency</p> <p>Requires LuckPerms Fabric PlaceholderAPI addon</p> <ul> <li><code>%luckperms:prefix%</code> - Returns the player's prefix.</li> <li><code>%luckperms:suffix%</code> - Returns the players suffix.</li> <li><code>%luckperms:meta [meta key]%</code> - Returns a single value for the given meta key.</li> <li><code>%luckperms:meta_all [meta key]%</code> - Returns all assigned values for the given meta key.</li> <li><code>%luckperms:prefix_element [element]%</code> - Returns a prefix element using the given \"meta stack\" element definition.   See Prefix Stacking</li> <li><code>%luckperms:suffix_element [element]%</code> - Returns a suffix element using the given \"meta stack\" element definition.   See Prefix Stacking.</li> <li><code>%luckperms:context%</code>/<code>%luckperms:context [context key]%</code> - Returns all of the players current contexts. If a key is   given as an argument, then only the values corresponding to the given key are returned.</li> <li><code>%luckperms:groups%</code> - Returns a list of the groups directly inherited by the player.</li> <li><code>%luckperms:inherited_groups%</code> - Returns a list of all of the groups inherited (directly or indirectly) by the player.</li> <li><code>%luckperms:primary_group_name%</code> - Returns the name of the player's primary group.</li> <li><code>%luckperms:has_permission [permission]%</code> - Returns if the player directly has the exact given permission.   (not the same as a permission check!)</li> <li><code>%luckperms:inherits_permission [permission]%</code> - Returns if the player inherits the exact given permission.   (not the same as a permission check!)</li> <li><code>%luckperms:check_permission [permission]%</code> - Returns the result of a permission check for the given permission on the player.</li> <li><code>%luckperms:in_group [group]%</code> - Returns if the player is directly a member of the given group.</li> <li><code>%luckperms:inherits_group [group]%</code> - Returns if the player is a direct or indirect member of the given group.</li> <li><code>%luckperms:on_track [track]%</code> - Returns if the player's \"primary group\" is on this track.   (deprecated - avoid relying on primary groups, use the placeholder below instead!)</li> <li><code>%luckperms:has_groups_on_track [track]%</code> - Returns if any of the groups the player is directly a member of is on the given track.</li> <li><code>%luckperms:highest_group_by_weight%</code> - Returns the name of the players highest weighted group, not including groups they indirectly   inherit from others.</li> <li><code>%luckperms:lowest_group_by_weight%</code> - Returns the name of the players lowest weighted group, not including groups they indirectly inherit   from others.</li> <li><code>%luckperms:highest_inherited_group_by_weight%</code> - Returns the name of the players highest weighted group, including groups they indirectly   inherit from others.</li> <li><code>%luckperms:lowest_inherited_group_by_weight%</code> - Returns the name of the players lowest weighted group, including groups they indirectly   inherit from others.</li> <li><code>%luckperms:current_group_on_track [track]%</code> - If the player is currently on the given track, returns the name of the group.</li> <li><code>%luckperms:next_group_on_track [track]%</code> - If the player is currently is currently on the given track, returns the name of the next   group. (the one they would be promoted to next)</li> <li><code>%luckperms:previous_group_on_track [track]%</code> - If the player is currently is currently on the given track, returns the name of the   previous group. (the one they would be demoted to next)</li> <li><code>%luckperms:first_group_on_tracks [tracks]%</code> - Given a comma separated list of track names, finds the first group inherited by the player   on any of the given tracks.</li> <li><code>%luckperms:last_group_on_tracks [tracks]%</code> - Given a comma separated list of track names, finds the last group inherited by the player on   any of the given tracks.</li> <li><code>%luckperms:expiry_time [permission]%</code> - Gets the duration remaining on a temporary permission assigned directly to the player.</li> <li><code>%luckperms:inherited_expiry_time [permission]%</code> - Gets the duration remaining on a temporary permission assigned directly to or inherited   by the player.</li> <li><code>%luckperms:group_expiry_time [group name]%</code> - Gets the duration remaining on a temporary group membership assigned directly to the   player.</li> <li><code>%luckperms:inherited_group_expiry_time [group name]%</code> - Gets the duration remaining on a temporary group membership assigned directly to   or inherited by the player.</li> </ul>"},{"location":"user/mod-placeholders/#playerex","title":"PlayerEx","text":"<ul> <li><code>%playerex:level%</code> - Shows current player level.</li> <li><code>%playerex:name_top [position]%</code> - Shows name of the player at the <code>n</code>th place, where <code>n</code> is the <code>position</code> argument.</li> <li><code>%playerex:level_top [position]%</code> - Shows level of the player at the <code>n</code>th place, where <code>n</code> is the <code>position</code> argument.</li> </ul>"},{"location":"user/mod-placeholders/#player-pronouns","title":"Player Pronouns","text":"<ul> <li><code>%playerpronouns:pronouns%</code> / <code>%playerpronouns:pronouns [default]%</code> - Displays formatted player's pronouns, or <code>default</code> if unset.</li> <li><code>%playerpronouns:raw_pronouns%</code> / <code>%playerpronouns:raw_pronouns [default]%</code> - Displays player's pronouns as raw text, or <code>default</code> if   unset. This allows text formatting to be embedded into the pronouns.</li> </ul>"},{"location":"user/mod-placeholders/#spark","title":"Spark","text":"<ul> <li><code>%spark:tps%</code> / <code>%spark:tps duration%</code> - Shows server TPS. <code>duration</code> can be <code>5s</code>, <code>10s</code>, <code>1m</code>, <code>5m</code>, or <code>15m</code>. Shows all durations if   left out</li> <li><code>%spark:tickduration%</code> / <code>%spark:tickduration [duration]%</code> - Shows the average tick durations. <code>duration</code> can be <code>10s</code> or <code>1m</code>. Shows all   durations if left out</li> <li><code>%spark:cpu_system%</code> / <code>%spark:cpu_system [duration]%</code> - Shows the average CPU usage for the whole system. <code>duration</code> can be <code>10s</code>, <code>1m</code>,   or <code>15m</code>. Shows all durations if left out</li> <li><code>%spark:cpu_process%</code> / <code>%spark:cpu_process [duration]%</code> - Shows the average CPU usage for the server process. <code>duration</code> can be <code>10s</code>,   <code>1m</code>, or <code>15m</code>. Shows all durations if left out</li> </ul>"},{"location":"user/mod-placeholders/#styled-nicknames","title":"Styled Nicknames","text":"<ul> <li><code>%styled-nicknames:display_name%</code> - Either nickname or default player name. (skips other formatting mods)</li> </ul>"},{"location":"user/mod-placeholders/#text-placeholder-api-expressions","title":"Text Placeholder API Expressions","text":"<ul> <li><code>%expr:math [Math expressions and ${placeholder}s]%</code> - See mod page for list of available expressions and functions.</li> <li><code>%expr:ifeq [aIsMath] [a] [bIsMath] [b] [cIsMath] [c] [dIsMath] [d]%</code> - Compare if <code>a</code> and <code>b</code> are equal, and return <code>c</code> or <code>d</code> accordingly.</li> <li><code>%expr:iflt [a] [b] [cIsMath] [c] [dIsMath] [d]%</code> - Compare if <code>a</code> is less than <code>b</code>, and return <code>c</code> or <code>d</code> accordingly.</li> <li><code>%expr:math [a] [b] [cIsMath] [c] [dIsMath] [d]%</code> - Compare if <code>a</code> is greater than <code>b</code>, and return <code>c</code> or <code>d</code> accordingly.</li> <li><code>%expr:pad [length] [str] [c]%</code> - Pad both sides of <code>str</code> with <code>c</code> until it is <code>length</code> long.</li> <li><code>%expr:padleft [length] [str] [c]%</code> - Pad left side of <code>str</code> with <code>c</code> until it is <code>length</code> long.</li> <li><code>%expr:padright [length] [str] [c]%</code> - Pad right side of <code>str</code> with <code>c</code> until it is <code>length</code> long.</li> <li><code>%expr:padmatch [match] [str] [c]%</code> - Pad both sides of <code>str</code> with <code>c</code> until it is the same length as <code>match</code>.</li> <li><code>%expr:padmatchleft [match] [str] [c]%</code> - Pad left side of <code>str</code> with <code>c</code> until it is the same length as <code>match</code>.</li> <li><code>%expr:padmatchright [match] [str] [c]%</code> - Pad right side of <code>str</code> with <code>c</code> until it is the same length as <code>match</code>.</li> </ul>"},{"location":"user/mod-placeholders/#vanish","title":"Vanish","text":"<ul> <li><code>%vanish:vanished%</code> - Displays a text (configurable via config) if a player is vanished.</li> <li><code>%vanish:online%</code> - The amount of players that the player viewing the placeholder can see.</li> </ul>"},{"location":"user/quicktext/","title":"QuickText Format","text":"<p>Warn</p> <p>Having issues with formatted arguments not working? It's possible the version of mod you use uses Simplified Text Format instead! Check it's documentation for more information!</p> <p>It's a simple, but flexible, tag based text format designed for modern Minecraft. It was created to allow quick and readable way of formatting Minecraft Text Components while still providing all of its functionality as opposed for legacy &amp;/\u00a7 formatting used by bukkit and bukkit-based plugins.</p>"},{"location":"user/quicktext/#structure","title":"Structure","text":"<p>Formatting is build on concept of tags, comparable to html.</p> <p>Most of them come in pairs of a starting (<code>&lt;tag&gt;</code>) and closing one (<code>&lt;/tag&gt;</code> for closing last tag of selected type or <code>&lt;\u200d/\u200d&gt;</code> for last opened one. While closing ones are technically optional, without them formatting will continue until end of an input text or special <code>&lt;/*&gt;</code> tag. Some tags support arguments, which are defined after the name in ordered inline fashion (for example <code>&lt;color #FF3333&gt;</code>) or as key-value pair (for example <code>&lt;hover value:'Hello!'&gt;</code>). You are allowed to mix inline and key-value defined arguments (in <code>KEY:VALUE</code> format). In that case, any key defined argument will be skipped from being read as ordered one. Arguments spaces are required to be wrapped in a <code>'</code>, <code>\"</code> or <code>`` symbols, with starting and ending symbols matching (for example</code>#!xml Hello!'&gt;...<code>,</code>#!xml Hello!'&gt;...<code>). If you want to use character used for wrapping, you can prefix it with backslash (for example as</code>\\'`) or type it twice). <p>In case you want to type <code>&lt;tag&gt;</code> as plain text, you need to prefix it with <code>\\</code> symbol .</p> Example <ul> <li><code>&lt;color #11dddd&gt;%player displayname%&lt;/color&gt; &lt;dark_gray&gt;\u00bb&lt;/dark_gray&gt; &lt;color #cccccc&gt;${message}</code></li> <li><code>&lt;red&gt;Hello &lt;blue&gt;world&lt;/blue&gt;!&lt;/red&gt;</code></li> <li><code>&lt;rainbow&gt;Some colors for you</code></li> </ul> <p>There are also few self-contained tags, that don't require closing ones. They can also take arguments in the same way to previous ones.</p> <p>Few examples: - <code>&lt;lang 'item.minecraft.diamond'&gt;</code> - <code>&lt;key 'key.jump'&gt;</code></p>"},{"location":"user/quicktext/#list-of-available-tags","title":"List of available tags","text":"<p>Here is list of all default tags available. Other mods can add new or limit usage of existing ones, so not every might work in yours case.</p>"},{"location":"user/quicktext/#colors","title":"Colors","text":"<p>Note</p> <p>This tag should be closed.</p> <p>By default, there are multiple tags representing colors. They use their vanilla name or (additional aliases).</p> <p>The current list includes  <code>&lt;yellow&gt;</code>, <code>&lt;dark_blue&gt;</code>, <code>&lt;dark_purple&gt;</code>, <code>&lt;gold&gt;</code>, <code>&lt;red&gt;</code>, <code>&lt;aqua&gt;</code>, <code>&lt;gray&gt;</code>, <code>&lt;light_purple&gt;</code>, <code>&lt;white&gt;</code>, <code>&lt;dark_gray&gt;</code>, <code>&lt;green&gt;</code>, <code>&lt;dark_green&gt;</code>, <code>&lt;blue&gt;</code>, <code>&lt;dark_aqua&gt;</code>, <code>&lt;dark_green&gt;</code>, <code>&lt;black&gt;</code></p> <p>There is also a universal <code>&lt;color [VALUE]&gt;</code>, <code>&lt;color value:[VALUE]&gt;</code>, <code>&lt;c [VALUE]&gt;</code> and <code>&lt;c value:[VALUE]&gt;</code> tags, in which you can replace <code>[VALUE]</code> with vanilla color name or an rgb color starting with <code>#</code> (for example <code>&lt;color #AABBCC&gt;</code>)</p>"},{"location":"user/quicktext/#decorations","title":"Decorations","text":"<p>Note</p> <p>This tag should be closed.</p> <p>These tags allow decorating text, they are quite simple.</p> <ul> <li><code>&lt;strikethrough&gt;</code>/<code>&lt;st&gt;</code> - Makes the text strikethrough,</li> <li><code>&lt;underline&gt;</code>/<code>&lt;underlined&gt;</code> - Underlines the text,</li> <li><code>&lt;italic&gt;</code>/<code>&lt;i&gt;</code> - Makes the text italic,</li> <li><code>&lt;obfuscated&gt;</code>/<code>&lt;obf&gt;</code> - Obfuscates the text (matrix effect),</li> <li><code>&lt;bold&gt;</code>/<code>&lt;b&gt;</code> - Makes the text bold,</li> </ul>"},{"location":"user/quicktext/#click-events","title":"Click events","text":"<p>Note</p> <p>This tag should be closed.</p> <p>Danger</p> <p>They should be however limited to admin usage only, as they can do harm if accessible by normal players.</p> <p>Click events allows making text more interactive. Tag definitions:  <code>&lt;click type:[TYPE] value:'[VALUE]'&gt;</code>, <code>&lt;click [TYPE] '[VALUE]'&gt;</code> or direct shortcut tags.</p> <p>There are few available actions:</p> <ul> <li><code>&lt;click open_url value '[VALUE]'&gt;</code>/<code>&lt;open_url '[VALUE]'&gt;</code>/<code>&lt;url '[VALUE]'&gt;</code> - Opens the provided url</li> <li><code>&lt;click run_command '[VALUE]'&gt;</code>/<code>&lt;run_cmd '[VALUE]'&gt;</code> - Runs a command as the player</li> <li><code>&lt;click suggest_command '[VALUE]'&gt;</code>/<code>&lt;suggest_command '[VALUE]'&gt;</code>/<code>&lt;cmd '[VALUE]'&gt;</code> - Suggests a command to the player</li> <li><code>&lt;click copy_to_clipboard '[VALUE]'&gt;</code>/<code>&lt;copy_to_clipboard '[VALUE]'&gt;</code>/<code>&lt;copy '[VALUE]'&gt;</code> - Copies text to the clipboard</li> <li><code>&lt;click change_page '[VALUE]'&gt;</code>/<code>&lt;change_page '[VALUE]'&gt;</code>/<code>&lt;page '[VALUE]'&gt;</code> - Changes the page in a book</li> </ul> <p><code>[VALUE]</code> needs to be replaced with targeted value, for example <code>gamemode creative</code></p>"},{"location":"user/quicktext/#hover","title":"Hover","text":"<p>Hover tag allows adding simple hover on text. It can be used to display additional information.</p> <p>Note</p> <p>This tag should be closed.</p> <ul> <li><code>&lt;hover show_text '[VALUE]'&gt;</code>/<code>&lt;hover '[VALUE]'&gt;</code> - Adds a simple text hover (<code>[VALUE]</code> uses the same formatting as rest)</li> <li><code>&lt;hover show_item '[VALUE]'&gt;</code> - Adds a simple ItemStack hover (<code>'[VALUE]'</code> is item in sNBT format)</li> <li><code>&lt;hover show_entity [type] [UUID] 'Display Name'&gt;</code> - Adds an entity hover.   (The colon (<code></code>) in the entity type needs to be replaced with <code>\\</code>.   For example, <code>&lt;hover show_entity minecraft\\ bee [UUID] 'Display Name'&gt;</code>)</li> </ul>"},{"location":"user/quicktext/#fonts","title":"Fonts","text":"<p>Note</p> <p>This tag should be closed.</p> <p>This tag allows you to change font to any build in one or one provided by resource pack.</p> <p>You can use it by simply adding <code>&lt;font '[VALUE]'&gt;</code>, where <code>'[VALUE]'</code> is just a font name. Minecraft has 3 build-in fonts  <code>default</code>, <code>uniform</code> and <code>alt</code>.</p>"},{"location":"user/quicktext/#inserting","title":"Inserting","text":"<p>Note</p> <p>This tag should be closed.</p> <p>This tag creates a clickable text, that inserts its value at the end of player's chat message.</p> <p>You can use it by writing <code>&lt;insert '[VALUE]'&gt;</code>, where <code>'[VALUE]'</code> inserted text (should be wrapped in <code>'</code>).</p>"},{"location":"user/quicktext/#translations","title":"Translations","text":"<p>Note</p> <p>This tag is self containing, so it doesn't contain a closing tag.</p> <p>Translations tag allows you to insert a text from a lang file (including ones parsed on servers by some mods).</p> <p>You use it with <code>&lt;lang [key] [optional arg 1] [optional arg 1] ...&gt;</code> or <code>&lt;lang key:[key] fallback:[fallback] [optional arg 1] [optional arg 1] ...&gt;</code> where <code>[key]</code> is a translation key, optional/key only <code>[fallback]</code> is used for keys missing their client side translations and <code>[optional arg X]</code> are optional, fully formatted arguments you can pass.</p>"},{"location":"user/quicktext/#control-keys","title":"Control keys","text":"<p>Control Keys</p> <p>You can find a list of control keys on the Minecraft Wiki</p> <p>Note</p> <p>This tag is self containing, so it doesn't contain a closing tag.</p> <p>This tag allows you to add information about player control keys, with respecting of theirs configuration.</p> <p>You can use it with <code>&lt;keybind '[VALUE]'&gt;</code> or <code>&lt;keybind value:'[VALUE]'&gt;</code>, where <code>'[VALUE]'</code> is a control key used.</p>"},{"location":"user/quicktext/#gradients","title":"Gradients","text":"<p>This tag allows you to add gradients to the text. However, it has multiple limitation that can block its usage. Currently, you can't use dynamic values (translations, control keys, placeholders, etc) within them, as they require static text.</p> <p>There 2 types of gradients: - <code>&lt;gradient (type:[type]) [color 1] [color 2] ...&gt;</code>/<code>&lt;gr (type:[type]) [color 1] [color 2] ...&gt;</code> - I can take multiple colors to move between them   smoothly. You can replace the optional <code>(type:[type])</code> with <code>type:oklab</code> (default), <code>type:hvs</code> or <code>type:hard</code> to change how thge gradient is handled - <code>&lt;hard_gradient [color 1] [color 2] ...&gt;</code>/<code>&lt;hgr [color 1] [color 2] ...&gt;</code> - I can take multiple colors to move between them   without mixing them. - <code>&lt;rainbow [frequency] [saturation] [offset]&gt;</code>/<code>&lt;rainbow f:[frequency] s:[saturation] o:[offset]&gt;</code>/<code>&lt;rb [...]&gt;</code> - It's simple rainbow gradient. All arguments are   optional (<code>&lt;ranbow&gt;</code> is still valid) and they take numbers between 0 and 1 (<code>0.3</code> for example)</p>"},{"location":"user/quicktext/#clear","title":"Clear","text":"<p>Note</p> <p>This tag should be closed.</p> <p>This tag allows you to clear any formatting within this tag, without leaving any visible tags. It also works with placeholders, which gives a bit more flexibility.</p> <p>This tag can work without arguments making it clear all formatting or with them limiting clearing to selected types.</p> <p>Examples: - <code>&lt;clear&gt;</code> - Removes all formatting, leaving only text. - <code>&lt;clear hover&gt;</code> - Removes all hovers. - <code>&lt;clear hover color&gt;</code> - Removes all hovers and colors.</p> <p>Supported arguments  <code>color</code>, <code>bold</code>, <code>italic</code>, <code>strikethrough</code>, <code>underline</code>, <code>hover</code>, <code>click</code>,:<code>insertion</code>, <code>font</code>, <code>all</code>.</p>"},{"location":"user/text-format/","title":"Simplified Text Format","text":"<p>Warn</p> <p>Having issues with formatted arguments not working? It's possible the version of mod you use uses QuickText instead! Check it's documentation for more information!</p> <p>It's a simple, string format inspired by formats like HTML or MiniMessage. It was created to allow quick and readable way of formatting Minecraft Text Components while still providing all of its functionality as opposed for legacy &amp;/\u00a7 formatting used by bukkit and bukkit-based plugins.</p>"},{"location":"user/text-format/#structure","title":"Structure","text":"<p>Formatting is build on concept of tags.</p> Nesting Quotations <p>In the rare circumstance  you need to nest quations, they must be escaped: <code>\\'</code>. For example, <pre><code>&lt;lang:'chat.type.team.sent':'&lt;hover\\:\\'&lt;lang\\:chat.type.team.hover&gt;\\'&gt;&lt;suggest_command\\:\\'/teammsg \\'&gt;${team}':'${displayName}':'${message}'&gt;\n</code></pre></p> <p>Most of them come in pairs of a starting (<code>&lt;tag&gt;</code>) and closing one (<code>&lt;/tag&gt;</code> for direct or <code>&lt;\u200d/\u200d&gt;</code> (2.1.3+) for automatic). While closing ones are technically optional, without them formatting will continue until end of an input text or special <code>&lt;reset&gt;</code> tag. Some tags support arguments, which can be passed by adding <code>:</code> after tag name in starting one (for example <code>&lt;color:#FF3333&gt; &lt;/color&gt;</code>). Arguments containing symbols like <code>:</code>, <code>&lt;</code>, <code>&gt;</code>, <code>%</code> and spaces should be wrapped in a <code>'</code> symbols (for example <code>&lt;hover:show_text:'&lt;red&gt;Hello!'&gt;...</code>).</p> <p>In case you want to type <code>&lt;tag&gt;</code> as plain text, you need to prefix it with <code>\\</code> symbol .</p> Example <ul> <li><code>&lt;color:#11dddd&gt;%player:displayname%&lt;/color&gt; &lt;dark_gray&gt;\u00bb&lt;/dark_gray&gt; &lt;color:#cccccc&gt;${message}</code></li> <li><code>&lt;red&gt;Hello &lt;blue&gt;world&lt;/blue&gt;!&lt;/red&gt;</code></li> <li><code>&lt;rainbow&gt;Some colors for you</code></li> </ul> <p>There are also few self-contained tags, that don't require closing ones. They can also take arguments in the same way to previous ones.</p> <p>Few examples:</p> <ul> <li><code>&lt;lang:'item.minecraft.diamond'&gt;</code></li> <li><code>&lt;reset&gt;</code></li> </ul>"},{"location":"user/text-format/#list-of-available-tags","title":"List of available tags","text":"<p>Here is list of all default tags available. Other mods can add new or limit usage of existing ones, so not every might work in yours case.</p>"},{"location":"user/text-format/#colors","title":"Colors","text":"<p>Note</p> <p>This tag should be closed.</p> <p>By default, there are multiple tags representing colors. They use their vanilla name or (additional aliases).</p> <p>The current list includes: <code>&lt;yellow&gt;</code>, <code>&lt;dark_blue&gt;</code>, <code>&lt;dark_purple&gt;</code>, <code>&lt;gold&gt;</code>, <code>&lt;red&gt;</code>, <code>&lt;aqua&gt;</code>, <code>&lt;gray&gt;</code>, <code>&lt;light_purple&gt;</code>, <code>&lt;white&gt;</code>, <code>&lt;dark_gray&gt;</code>, <code>&lt;green&gt;</code>, <code>&lt;dark_green&gt;</code>, <code>&lt;blue&gt;</code>, <code>&lt;dark_aqua&gt;</code>, <code>&lt;dark_green&gt;</code>, <code>&lt;black&gt;</code></p> <p>There is also a universal <code>&lt;color:[value]&gt;</code> and <code>&lt;c:[value]&gt;</code> tags, in which you can replace <code>[value]</code> with vanilla color name or an rgb color starting with <code>#</code> (for example <code>&lt;color:#AABBCC&gt;</code>)</p>"},{"location":"user/text-format/#decorations","title":"Decorations","text":"<p>Note</p> <p>This tag should be closed.</p> <p>These tags allow decorating text, they are quite simple.</p> <ul> <li><code>&lt;strikethrough&gt;</code>/<code>&lt;st&gt;</code> - Makes the text strikethrough,</li> <li><code>&lt;underline&gt;</code>/<code>&lt;underlined&gt;</code> - Underlines the text,</li> <li><code>&lt;italic&gt;</code>/<code>&lt;i&gt;</code> - Makes the text italic,</li> <li><code>&lt;obfuscated&gt;</code>/<code>&lt;obf&gt;</code> - Obfuscates the text (matrix effect),</li> <li><code>&lt;bold&gt;</code>/<code>&lt;b&gt;</code> - Makes the text bold,</li> </ul>"},{"location":"user/text-format/#click-events","title":"Click events","text":"<p>Note</p> <p>This tag should be closed.</p> <p>Danger</p> <p>They should be however limited to admin usage only, as they can do harm if accessible by normal players.</p> <p>Click events allows making text more interactive.</p> <p>There are few available actions:</p> <ul> <li><code>&lt;click:open_url:[value]&gt;</code>/<code>&lt;open_url:[value]&gt;</code>/<code>&lt;url:[value]&gt;</code> - Opens the provided url</li> <li><code>&lt;click:run_command:[value]&gt;</code>/<code>&lt;run_cmd:[value]&gt;</code> - Runs a command as the player</li> <li><code>&lt;click:suggest_command:[value]&gt;</code>/<code>&lt;suggest_command:[value]&gt;</code>/<code>&lt;cmd:[value]&gt;</code> - Suggests a command to the player</li> <li><code>&lt;click:copy_to_clipboard:[value]&gt;</code>/<code>&lt;copy_to_clipboard:[value]&gt;</code>/<code>&lt;copy:[value]&gt;</code> - Copies text to the clipboard</li> <li><code>&lt;click:change_page:[value]&gt;</code>/<code>&lt;change_page:[value]&gt;</code>/<code>&lt;page:[value]&gt;</code> - Changes the page in a book</li> </ul> <p><code>[value]</code> needs to be replaced with targeted value, for example <code>'gamemode creative'</code></p>"},{"location":"user/text-format/#hover","title":"Hover","text":"<p>Hover tag allows adding simple hover on text. It can be used to display additional information.</p> <p>Note</p> <p>This tag should be closed.</p> <ul> <li><code>&lt;hover:show_text:[value]&gt;</code>/<code>&lt;hover:[value]&gt;</code> - Adds a simple text hover (<code>[value]</code> uses the same formatting as rest)</li> <li><code>&lt;hover:show_item:[value]&gt;</code> - Adds a simple ItemStack hover (<code>[value]</code> is item in sNBT format)</li> <li><code>&lt;hover:show_entity:[type]:[UUID]:'Display Name'&gt;</code> - Adds an entity hover.   (The colon (<code>:</code>) in the entity type needs to be replaced with <code>\\:</code>.   For example, <code>&lt;hover:show_entity:minecraft\\:bee:[UUID]:'Display Name'&gt;</code>)</li> </ul>"},{"location":"user/text-format/#fonts","title":"Fonts","text":"<p>Note</p> <p>This tag should be closed.</p> <p>This tag allows you to change font to any build in one or one provided by resource pack.</p> <p>You can use it by simply adding <code>&lt;font:[value]&gt;</code>, where <code>[value]</code> is just a font name. Minecraft has 3 build-in fonts: <code>default</code>, <code>uniform</code> and <code>alt</code>.</p>"},{"location":"user/text-format/#inserting","title":"Inserting","text":"<p>Note</p> <p>This tag should be closed.</p> <p>This tag creates a clickable text, that inserts its value at the end of player's chat message.</p> <p>You can use it by writing <code>&lt;insert:[value]&gt;</code>, where <code>[value]</code> inserted text (should be wrapped in <code>'</code>).</p>"},{"location":"user/text-format/#translations","title":"Translations","text":"<p>Note</p> <p>This tag is self containing, so it doesn't contain a closing tag.</p> <p>Translations tag allows you to insert a text from a lang file (including ones parsed on servers by some mods).</p> <p>You use it with <code>&lt;lang:[key]:[optional arg 1]:[optional arg 1]:...&gt;</code>, where <code>[key]</code> is a translation key and <code>[optional arg X]</code> are optional, fully formatted arguments you can pass.</p>"},{"location":"user/text-format/#control-keys","title":"Control keys","text":"<p>Control Keys</p> <p>You can find a list of control keys on the Minecraft Wiki</p> <p>Note</p> <p>This tag is self containing, so it doesn't contain a closing tag.</p> <p>This tag allows you to add information about player control keys, with respecting of theirs configuration.</p> <p>You can use it with <code>&lt;keybind:[value]&gt;</code>, where <code>[value]</code> is a control key used.</p>"},{"location":"user/text-format/#gradients","title":"Gradients","text":"<p>This tag allows you to add gradients to the text. However, it has multiple limitation that can block its usage. Currently, you can't use dynamic values (translations, control keys, placeholders, etc) within them, as they require static text.</p> <p>There 2 types of gradients:</p> <ul> <li><code>&lt;gradient:[color 1]:[color 2]:...&gt;</code>/<code>&lt;gr:[color 1]:[color 2]:...&gt;</code> - I can take multiple colors to move between them   smoothly.</li> <li><code>&lt;hard_gradient:[color 1]:[color 2]:...&gt;</code>/<code>&lt;hgr:[color 1]:[color 2]:...&gt;</code> - I can take multiple colors to move between them   without mixing them.</li> <li><code>&lt;rainbow:[frequency]:[saturation]:[offset]&gt;</code>/<code>&lt;rb:[...]&gt;</code> - It's simple rainbow gradient. All arguments are   optional (<code>&lt;ranbow&gt;</code> is still valid) and they take numbers between 0 and 1 (<code>0.3</code> for example)</li> </ul>"},{"location":"user/text-format/#reset","title":"Reset","text":"<p><code>&lt;reset&gt;</code> and <code>&lt;r&gt;</code> are special, self-contained tags which close all previous formatting. They are useful in cases, where you want to close multiple formatting tags quickly</p>"},{"location":"user/text-format/#clear-213","title":"Clear (2.1.3+)","text":"<p>Note</p> <p>This tag should be closed.</p> <p>This tag allows you to clear any formatting within this tag, without leaving any visible tags. It also works with placeholders, which gives a bit more flexibility.</p> <p>This tag can work without arguments making it clear all formatting or with them limiting clearing to selected types.</p> <p>Examples:</p> <ul> <li><code>&lt;clear&gt;</code> - Removes all formatting, leaving only text.</li> <li><code>&lt;clear:hover&gt;</code> - Removes all hovers.</li> <li><code>&lt;clear:hover:color&gt;</code> - Removes all hovers and colors.</li> </ul> <p>Supported arguments: <code>color</code>, <code>bold</code>, <code>italic</code>, <code>strikethrough</code>, <code>underline</code>, <code>hover</code>, <code>click</code>,  <code>insertion</code>, <code>font</code>, <code>all</code>.</p>"}]}